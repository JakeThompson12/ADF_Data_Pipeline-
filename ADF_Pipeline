import csv
import matplotlib.pyplot as plt
import pandas as pd

input_filename = r'C:\Users\2586376t\Documents-PGR\Research\Properties-of-MPOMs\conda\Test.out'
output_filename = 'output.csv'

def Extract_Energy_and_Cycle(input_filename, output_filename):
    energy_data = []  # Create a list to store the energy values
    HOMO__Output_data = []  # Create a list to store the energy cycle values
    LUMO__Output_data = []  # Create a list to store the energy cycle values


    with open(input_filename, 'r') as file_object:
        for line in file_object:
            if 'Energy (hartree)' in line:
                energy = float(line[29:39])  # Extract and convert the energy value to float
                energy_data.append(energy)  # Append the energy value to the list
            elif ' HOMO :' in line:
                HOMO_Energy=float(line[35:56])		
                HOMO__Output_data .append(HOMO_Energy)  # Append the energy value to the list
            elif ' LUMO :' in line:
                LUMO_Energy=float(line[35:56])	
                LUMO__Output_data .append(LUMO_Energy)  # Append the energy value to the list

	
    combined_data = list(zip(energy_data, HOMO__Output_data, LUMO__Output_data))

    # Write the combined data to a CSV file with headers
    with open(output_filename, 'w', newline='') as csv_file:
        csv_writer = csv.writer(csv_file)
        
        # Write header rows
        csv_writer.writerow(['Energy / Hartree', 'HOMO_Energy / eV', 'LUMO_Energy / eV'])
        
        # Write the combined data
        csv_writer.writerows(combined_data)

# Call the function to extract and write the data
Extract_Energy_and_Cycle(input_filename, output_filename)

df = pd.read_csv(output_filename)

fig = plt.figure() # Plot HOMO-LUMO Gap
ax = fig.add_subplot()
ax.scatter(1, df['HOMO_Energy / eV'], 800, marker="_", color="red", label='HOMO / eV')
ax.scatter(1, df['LUMO_Energy / eV'], 800, marker="_",  color="black", label='LUMO / eV')
ax.set_xticks([])
ax.legend()
ax.set_ylabel('HOMO-LUMO Gap / eV')
for index, row in df.iterrows():
    plt.vlines(x=1, ymin=row['HOMO_Energy / eV'], ymax=row['LUMO_Energy / eV'], colors='black')

plt.show()
